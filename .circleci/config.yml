version: 2.1
executors:
  docker-node:
    docker:
      - image: circleci/node:10
  macos:
    macos:
      xcode: 10.2.1
commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
jobs:
  build_and_sign:
    macos:
      xcode: "10.2.0"

    steps:
      - checkout

      - run:
          name: x
          command: |
            openssl req -subj '/CN=spaghetti.software.com' -config spaghetti.software.extensions -x509 -newkey rsa:4096 -keyout selfSignedKey.pem -passout pass:foobar -out selfSigned.pem -days 365
            openssl pkcs12 -export -out spaghetti.software.p12 -inkey selfSignedKey.pem -passin pass:foobar -in selfSigned.pem -password pass:abcabc


      - run:
          name: sdfsdfsdfsdfsdf
          command: security create-keychain -p 'temporaryPassword' MyKeychain.keychain

      - run:
          name: cr
          command: security import spaghetti.software.p12 -t agg -k MyKeychain.keychain -P abcabc -A

      - run:
          name: list ids
          command: security find-identity MyKeychain.keychain

      - run:
          name: list ids pp
          command: security find-identity MyKeychain.keychain -p codesigning

      - run:
          name: cart
          command: |
            echo keyUsage = critical,digitalSignature > v3.ext
            echo extendedKeyUsage=critical,1.3.6.1.5.5.7.3.3 >> v3.ext

      - run:
          name: gen rsa key
          command: openssl genrsa -out key.pem 2048 -config ./self_sign_openssl.cnf

      - run:
          name: a
          command: openssl req -new -key ./key.pem -out ./key.csr -config ./cert_req_openssl.cnf

      - run:
          name: b
          command: openssl x509 -req -days 10 -in ./key.csr -signkey ./key.pem -out ./key.crt

      - run:
          name: c
          command: certtool i ./key.crt k="`pwd`/key.keychain" r=./key.pem c p=moof

      - run:
          name: show identities
          command: security find-identity key.keychain

      - run:
          name: show identities p
          command: security find-identity key.keychain -p codesigning

      - run:
          name: Install Dependencies
          command: yarn

      - run:
          name: Run build
          command: yarn build

      - run:
          name: install nexe
          command: npm install --global nexe

      - run:
          no_output_timeout: 60m
          name: build osx app
          command: node sign.js

      - run:
          name: signgggg
          command: codesign --deep --force --verbose --sign - ./project

      - run:
          name: signing
          command: codesign --deep --verbose -s FE0A0B0F9C1410AC4A54174E197AE5F4396D180E --force --keychain MyKeyChain.keychain ./project

      - run:
          name: d
          command: codesign -s 75200AC6B3B77B331A9553220DF2513822B9DCDA --keychain key.keychain ./project

      - run:
          name: verify
          command: codesign -vvvv ./project

  build:
    executor: docker-node
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules/
      - run:
          name: Run tests
          command: yarn test.coverage --verbose
      - run:
          name: Run build
          command: yarn build
      - early_return_for_forked_pull_requests
  harness:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: yarn
      - run:
          name: Create CLI binary
          command: yarn build.binary
      - run:
          name: Run Harness
          command: yarn test.harness

  publish:
    executor: docker-node
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: yarn
      - run:
          name: Build all code to JavaScript
          command: yarn build
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: Publish
          command: yarn lerna publish from-git --create-release=github --yes
      - run:
          name: Create CLI binaries
          command: npx pkg --out-path ./cli-binaries --targets linux,macos ./packages/cli/
      - store_artifacts:
          path: ./cli-binaries
      - persist_to_workspace:
          root: ./
          paths:
            - cli-binaries
  upload_artifacts:
    docker:
      - image: circleci/golang:1-stretch
    steps:
      - attach_workspace:
          at: /tmp/
      - run:
          name: "Download GitHub Release Utility"
          command: go get github.com/tcnksm/ghr
      - run:
          name: "Publish Release artifacts on GitHub"
          command: ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${CIRCLE_TAG} /tmp/cli-binaries

workflows:
  version: 2
  build:
    jobs:
      - build_and_sign